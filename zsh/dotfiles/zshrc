export ZSH=$HOME/.oh-my-zsh

export ZSH_THEME="funky"

plugins=(git github git-flow zsh-syntax-highlighting zsh-history-substring-search extract archlinux)

source $ZSH/oh-my-zsh.sh

export DISABLE_AUTO_TITLE="true"
###############################

autoload -Uz compinit edit-command-line zmv promptinit
compinit
promptinit
zmodload -i zsh/complist
zle -N edit-command-line

HISTFILE=~/.zhistory
HISTSIZE=1000
SAVEHIST=10000
setopt appendhistory
setopt hist_ignore_dups
setopt share_history
setopt hist_verify
setopt inc_append_history
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_space
setopt autocd
setopt extendedglob
setopt notify
setopt auto_menu
setopt complete_in_word
setopt auto_name_dirs
setopt auto_pushd
setopt pushd_ignore_dups
setopt completealiases
unsetopt beep
 
stty stop undef

zstyle ':compinstall::' filename '/home/zendeavor/.zshrc'
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _list _oldlist _expand _complete _ignored _match _approximate _prefix
zstyle ':completion:*' completions 1
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' glob 1
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent pwd .. directory
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list '' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} r:|[._-]=** r:|=**' 'l:|=* r:|=*'
zstyle ':completion:*' max-errors 2 numeric
zstyle ':completion:*' menu select=9
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' original true
zstyle ':completion:*' preserve-prefix '//[^/]##/'
zstyle ':completion:*' prompt '%e\'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' substitute 1
zstyle ':completion:*' use-compctl true
zstyle ':completion:*' verbose true
zstyle ':completion:*' word true
zstyle ':completion:*' squeeze-slashes true


###############################
## More completion options
# tab completion for PID :D
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always
zstyle ':completion:*:processes' command 'ps -e'
zstyle ':completion:*:processes-names' command 'ps -eo comm'
# Use caching so that commands like pacman(?) complete are useable
zstyle ':completion::complete:*' use-cache 1
zstyle ':completion::complete:*' cache-path ~/.oh-my-zsh/cache/
# Don't complete uninteresting users
zstyle ':completion:*:*:*:users' ignored-patterns \
        adm amanda apache avahi beaglidx bin cacti canna clamav daemon \
        dbus distcache dovecot fax ftp games gdm gkrellmd gopher \
        hacluster haldaemon halt hsqldb ident junkbust ldap lp mail \
        mailman mailnull mldonkey mysql nagios \
        named netdump news nfsnobody nobody nscd ntp nut nx openvpn \
        operator pcap postfix postgres privoxy pulse pvm quagga radvd \
        rpc rpcuser rpm shutdown squid sshd sync uucp vcsa xfs

###############################
autoload zkbd
function zkbd_file() {
    [[ -f ~/.zkbd/${TERM}-${VENDOR}-${OSTYPE} ]] && printf '%s' ~/".zkbd/${TERM}-${VENDOR}-${OSTYPE}" && return 0
    [[ -f ~/.zkbd/${TERM}-${DISPLAY}          ]] && printf '%s' ~/".zkbd/${TERM}-${DISPLAY}"          && return 0
    return 1
}

[[ ! -d ~/.zkbd ]] && mkdir ~/.zkbd
keyfile=$(zkbd_file)
ret=$?
if [[ ${ret} -ne 0 ]]; then
    zkbd
    keyfile=$(zkbd_file)
    ret=$?
fi
if [[ ${ret} -eq 0 ]] ; then
    source "${keyfile}"
else
    printf 'Failed to setup keys using zkbd.\n'
fi
unfunction zkbd_file; unset keyfile ret
source ~/.zkbd/$TERM-${DISPLAY:-$VENDOR-$OSTYPE}
# setup key accordingly
[[ -n "${key[Home]}"    ]]  && bindkey  "${key[Home]}"    beginning-of-line
[[ -n "${key[End]}"     ]]  && bindkey  "${key[End]}"     end-of-line
[[ -n "${key[Insert]}"  ]]  && bindkey  "${key[Insert]}"  overwrite-mode
[[ -n "${key[Delete]}"  ]]  && bindkey  "${key[Delete]}"  delete-char
[[ -n "${key[Up]}"      ]]  && bindkey  "${key[Up]}"      up-line-or-history
[[ -n "${key[Down]}"    ]]  && bindkey  "${key[Down]}"    down-line-or-history
[[ -n "${key[Left]}"    ]]  && bindkey  "${key[Left]}"    backward-char
[[ -n "${key[Right]}"   ]]  && bindkey  "${key[Right]}"   forward-char
###############################
## Shell aliases
# git
alias gl='git pull'
alias gp='git push'
alias gd='git diff'
alias gc='git commit -m'
alias gca='git commit -a -m'
alias gco='git checkout'
alias gb='git branch'
alias gs='git status'
alias gsrm="git status | grep deleted | awk '{print \$3}' | xargs git rm"
alias gcl='git log `git log -1 --format=%H -- CHANGELOG*`..; cat CHANGELOG*'
# ssh
alias digimm='ssh dig.digitalimmersion.info'
alias pingas="ssh pingas.org"
alias mntpingas='sshfs -o sshfs_debug pingas.org:/home/zendeavor ~/mnt/remote/pingas'
alias sshome='ssh zendeavor.dyndns.org'
alias mnthome='sshfs -o sshfs_debug zendeavor.dyndns.org:/media/data/zendeavor ~/mnt/remote/zendeavor'
# python interps
alias ipy='ipython'
alias ipy2='ipython2'
alias bpy='bpython'
alias bpy2='bpython2'
# convenience
alias psc='ps xawf -eo pid,user,args'
alias blkid='blkid -c /dev/null'
alias ff='find -type f -name '
alias udm='udiskie-umount'
alias updatedb="sudo updatedb"
alias mkpkg="makepkg -si"
alias sudo='sudo '
alias matic='sudo pacmatic'
alias sprunge='curl -F "sprunge=<-" http://sprunge.us'
alias steam="~/bin/steam.sh"
alias X='extract'
alias vr='vim --remote-silent'
alias gvr='gvim --remote-silent'
alias vi='vim'
alias zshrc='$EDITOR ~/.zshrc && source ~/.zshrc'
alias packer='TMPDIR=~/builds/aur packer'
# ls
alias ls="ls -Fh --color=auto"
alias lh='ls -s'
alias lda='ls -d .*'
alias la='nocorrect ls -A'
# cd
alias ..='cd ..'
alias cd..='cd ..'
alias 1='cd -'
alias 2='cd +2'
alias 3='cd +3'
alias 4='cd +4'
alias 5='cd +5'
###############################
##############################
## Shell functions
function zsh_stats() {
  history | awk '{print $2}' | sort | uniq -c | sort -rn | head
}

function uninstall_oh_my_zsh {
  /bin/sh $ZSH/tools/uninstall.sh
}

function upgrade_oh_my_zsh {
  /bin/sh $ZSH/tools/upgrade.sh
}

function pacman {
  case $1 in
    -S | -S[^sih]* | -R* | -U*)
            /usr/bin/sudo /usr/bin/pacman-color "$@" ;;
    *)      /usr/bin/pacman-color "$@" ;;
  esac
}
alias p='pacman'

function vman {
  /usr/bin/whatis "$@" >/dev/null

  if [ $? -eq 0 ]; then
  vim -c "Man $*" -c 'silent! only' -c 'nmap q :q<CR>'
  else
  man "$@"
  fi
}

function secure_chromium {
  local PORT=4711; export PORT
  local SOCKS_SERVER=localhost:$PORT; export SOCKS_SERVER
  local SOCKS_VERSION=5; export SOCKS_VERSION
  chromium-dev &
  exit
}
